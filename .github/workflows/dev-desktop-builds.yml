name: Development desktop builds

on:
  workflow_dispatch:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]
    paths-ignore: 
    - "Translations/*"
    - "installer/*.pot"
    - "installer/po/*"

concurrency:
  group: ci-${{github.actor}}-${{github.head_ref || github.run_number}}-${{github.ref}}-devdesktop
  cancel-in-progress: true

env:
  GODOT_VERSION: 4.2.2
  GODOT_RELEASE: stable
  GODOT_FEATURE_VERSION: 4
  PROJECT_NAME: Pixelorama

jobs:
  export-windows:
    name: Windows Export üóî
    runs-on: ubuntu-latest
    steps:
      - name: Checkout üõéÔ∏è
        uses: actions/checkout@v4
        with:
          submodules: true
      - name: Set up Godot
        uses: ./.github/actions/set-up-godot
      - name: Setup WINE and rcedit üç∑
        run: |
          # Download rcedit and install wine.
          wget -q https://github.com/electron/rcedit/releases/download/v2.0.0/rcedit-x64.exe
          sudo apt update
          sudo apt install -y --fix-missing wine64
          # Move rcedit to different place.
          mkdir -v -p ~/.local/share/rcedit
          mv rcedit-x64.exe ~/.local/share/rcedit
          # CD out of project directory so Godot doesn't load it.
          cd ~
          # Run Godot to generate editor config file.
          godot --headless --quit
          # Add wine and rcedit paths to Godot config.
          echo 'export/windows/wine = "/usr/bin/wine64"' >> ~/.config/godot/editor_settings-${GODOT_FEATURE_VERSION}.tres
          echo 'export/windows/rcedit = "/home/runner/.local/share/rcedit/rcedit-x64.exe"' >> ~/.config/godot/editor_settings-${GODOT_FEATURE_VERSION}.tres
      - name: Windows Build üîß
        run: |
          mkdir -v -p ./build/${PROJECT_NAME}-Windows-64bit/
          godot --headless -v --export-release "Windows Desktop 64-bit" ./build/${PROJECT_NAME}-Windows-64bit/$PROJECT_NAME.exe
      - name: Copy pixelorama_data folder üìÅ
        run: |
          cp -R ./pixelorama_data ./build/${PROJECT_NAME}-Windows-64bit
          rm ./build/${PROJECT_NAME}-Windows-64bit/pixelorama_data/.gdignore
      - name: Upload Artifact üöÄ
        uses: actions/upload-artifact@v4
        with:
          name: ${{env.PROJECT_NAME}}-Windows-64bit
          path: ./build/${{env.PROJECT_NAME}}-Windows-64bit/
          retention-days: 14

  export-linux:
    name: Linux Export üêß
    runs-on: ubuntu-latest
    steps:
      - name: Checkout üõéÔ∏è
        uses: actions/checkout@v4
        with:
          submodules: true
      - name: Set up Godot
        uses: ./.github/actions/set-up-godot
      - name: Linux Build üîß
        run: |
          mkdir -v -p ./build/${PROJECT_NAME}-Linux-64bit/
          godot --headless -v --export-release "Linux/X11 64-bit" ./build/${PROJECT_NAME}-Linux-64bit/$PROJECT_NAME.x86_64
          mkdir -v -p ./build/${PROJECT_NAME}-Linux-ARM64/
          godot --headless -v --export-release "Linux/X11 ARM64" ./build/${PROJECT_NAME}-Linux-ARM64/${PROJECT_NAME}.arm64
      - name: Give execute permission ‚òëÔ∏è
        run: |
          chmod +x ./build/${PROJECT_NAME}-Linux-64bit/$PROJECT_NAME.x86_64
          chmod +x ./build/${PROJECT_NAME}-Linux-ARM64/${PROJECT_NAME}.arm64
      - name: Copy pixelorama_data folder üìÅ
        run: |
          rm ./pixelorama_data/.gdignore
          cp -R ./pixelorama_data ./build/${PROJECT_NAME}-Linux-64bit
          cp -R ./pixelorama_data ./build/${PROJECT_NAME}-Linux-ARM64
      - name: Create tar.gz archive üóúÔ∏è
        run: |
          cd build
          tar zcvf ${PROJECT_NAME}-Linux-64bit.tar.gz ${PROJECT_NAME}-Linux-64bit
          tar zcvf ${PROJECT_NAME}-Linux-ARM64.tar.gz ${PROJECT_NAME}-Linux-ARM64
      - name: Upload Linux x86_64 Artifact üöÄ
        uses: actions/upload-artifact@v4
        with:
          name: ${{env.PROJECT_NAME}}-Linux-64bit
          path: ./build/${{env.PROJECT_NAME}}-Linux-64bit.tar.gz
          retention-days: 14
      - name: Upload Linux ARM64 Artifact üöÄ
        uses: actions/upload-artifact@v4
        with:
          name: ${{env.PROJECT_NAME}}-Linux-ARM64
          path: ./build/${{env.PROJECT_NAME}}-Linux-ARM64.tar.gz
          retention-days: 14

  export-mac:
    name: Mac Export üçé
    runs-on: macos-latest
    steps:
      - name: Checkout üõéÔ∏è
        uses: actions/checkout@v4
        with:
          submodules: true
      - name: Setup environment üîß
        run: |
          export GODOT_VERSION=${GODOT_VERSION}
          export PROJECT_NAME=${PROJECT_NAME}
      - name: Download and extract export templates üíæ
        run: |
          mkdir -v -p "/Users/runner/Library/Application Support/Godot/export_templates/${GODOT_VERSION}.stable"
          wget https://github.com/godotengine/godot-builds/releases/download/${GODOT_VERSION}-stable/Godot_v${GODOT_VERSION}-stable_export_templates.tpz
          unzip -a Godot_v${GODOT_VERSION}-stable_export_templates.tpz
          mv ./templates/* "/Users/runner/Library/Application Support/Godot/export_templates/${GODOT_VERSION}.stable"
      - name: Download Godot headless binary ü§ñ
        run: |
          wget https://github.com/godotengine/godot/releases/download/${GODOT_VERSION}-stable/Godot_v${GODOT_VERSION}-stable_macos.universal.zip
          unzip -a Godot_v${GODOT_VERSION}-stable_macos.universal.zip
      - name: Setup üíª
        run: mkdir -v -p ./build/mac
      - name: Import resources once üì¶
        continue-on-error: true
        run: ./Godot.app/Contents/MacOS/Godot --headless -v --import
      - name: Mac Build üîß
        run: |
          chown runner ./Godot.app/Contents/MacOS/Godot
          chmod +x ./Godot.app/Contents/MacOS/Godot
          ./Godot.app/Contents/MacOS/Godot --headless -v --export-release "macOS" ./build/mac/${PROJECT_NAME}.zip
      - name: Make application executable üîß
        run: |
          unzip -a ./build/mac/${PROJECT_NAME}.zip -d ./build/mac
          chmod +x ./build/mac/${PROJECT_NAME}.app/Contents/MacOS/${PROJECT_NAME}
          rm ./build/mac/${PROJECT_NAME}.zip
      - name: Fix application icon üñº
        run: sips -s format icns ./build/mac/${PROJECT_NAME}.app/Contents/Resources/icon.icns --out ./build/mac/${PROJECT_NAME}.app/Contents/Resources/icon.icns
      - name: Copy pixelorama_data folder üìÅ
        run: |
          cp -R ./pixelorama_data ./build/mac/${PROJECT_NAME}.app/Contents/Resources
          rm ./build/mac/${PROJECT_NAME}.app/Contents/Resources/pixelorama_data/.gdignore
      - name: Ad-hoc signing ‚úçÔ∏è
        run: codesign -s - --force --deep ./build/mac/${PROJECT_NAME}.app
      - name: Create DMG archive üîß
        run: hdiutil create -srcfolder ./build/mac -fs HFS+ -volname ${PROJECT_NAME} ./build/mac/${PROJECT_NAME}.dmg
      - name: Upload Artifact üöÄ
        uses: actions/upload-artifact@v4
        with:
          name: ${{env.PROJECT_NAME}}-Mac
          path: ./build/mac/${{env.PROJECT_NAME}}.dmg
          retention-days: 14
